// Prisma Schema for NestJS Fastify Template
// Compatible with hexagonal architecture and TypeScript strict mode
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User status enum
enum UserStatus {
  REGISTERED
  ACTIVE
  BANNED
  INACTIVE
}

// User role enum
enum UserRole {
  ADMIN
  USER
}

// User model
model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String         @unique @db.VarChar(64)
  password      String         @db.VarChar(64)
  userName      String         @unique @map("user_name") @db.VarChar(20)
  status        UserStatus     @default(REGISTERED)
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime       @updatedAt @map("updated_at") @db.Timestamptz()
  refreshTokens RefreshToken[]

  @@map("users")
}

// Refresh Token model for JWT authentication
model RefreshToken {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  tokenHash String    @unique @db.VarChar(64) // sha256 hex
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  expiresAt DateTime  @map("expires_at") @db.Timestamptz()
  revokedAt DateTime? @map("revoked_at") @db.Timestamptz()

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([revokedAt])
  @@map("refresh_tokens")
}
