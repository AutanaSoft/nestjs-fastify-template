services:
  # NestJS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nestjs-app
    restart: unless-stopped
    ports:
      - '${APP_PORT:-4200}:${APP_PORT:-4200}'
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:${APP_PORT:-4200}/app/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MariaDB Database
  mariadb:
    image: mariadb:latest
    container_name: nestjs-mariadb
    restart: unless-stopped
    # Comment out ports for production - only internal access
    ports:
      - '${DB_PORT:-3306}:3306'
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-root123}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-nestjs_app}
      - MYSQL_USER=${MYSQL_USER:-nestjs}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-nestjs123}
    volumes:
      - mariadb_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test:
        [
          'CMD',
          'mariadb-admin',
          'ping',
          '-h',
          'localhost',
          '-u',
          'root',
          '-p${MYSQL_ROOT_PASSWORD:-root123}',
        ]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:latest
    container_name: nestjs-redis
    restart: unless-stopped
    # Comment out ports for production - only internal access
    # ports:
    #   - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

# Named volumes for data persistence
volumes:
  mariadb_data:
    driver: local
  redis_data:
    driver: local

# Custom network
networks:
  app-network:
    driver: bridge
