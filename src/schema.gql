# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Application information"""
type AppInfoResponseDto {
  """Success message"""
  message: String!

  """Application name"""
  name: String!

  """Application version"""
  version: String!

  """Correlation ID"""
  correlationId: String!
}

"""Database health status"""
type DatabaseHealthDto {
  """Database connection status"""
  status: String!

  """Database response message"""
  message: String!
}

"""Health check response"""
type HealthCheckResponseDto {
  """Application name"""
  name: String!

  """Application version"""
  version: String!

  """Correlation ID"""
  correlationId: String!

  """Health check status"""
  status: String!

  """Health check timestamp"""
  timestamp: String!

  """Database health status"""
  database: DatabaseHealthDto!
}

"""Register user data"""
type UserDto {
  """User unique identifier"""
  id: String!

  """User email address"""
  email: String!

  """User name"""
  userName: String!

  """User status"""
  status: UserStatus!

  """User role"""
  role: UserRole!

  """User account creation date"""
  createdAt: DateTime!

  """User account last update date"""
  updatedAt: DateTime!
}

enum UserStatus {
  REGISTERED
  ACTIVE
  BANNED
  INACTIVE
}

enum UserRole {
  ADMIN
  USER
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Query {
  getAppInfo: AppInfoResponseDto!
  getHealth: HealthCheckResponseDto!

  """Find all users"""
  findAll(
    """Filter for finding users"""
    filter: UserFindFilterInputDto

    """Sort order for finding users"""
    sort: UserSortOrderInputDto
  ): [UserDto!]!
}

input UserFindFilterInputDto {
  status: UserStatus
  role: UserRole
  email: String
  userName: String
  createdAtFrom: DateTime
  createdAtTo: DateTime
}

input UserSortOrderInputDto {
  sortBy: UserSortBy = CREATED_AT
  sortOrder: SortOrder = DESC
}

"""The sort by options for users"""
enum UserSortBy {
  CREATED_AT
  UPDATED_AT
  EMAIL
  USERNAME
}

"""The sort order options"""
enum SortOrder {
  ASC
  DESC
}

type Mutation {
  """Create a new user"""
  create(
    """Data for creating a new user"""
    data: UserCreateInputDto!
  ): UserDto!
}

input UserCreateInputDto {
  email: String!
  password: String!
  userName: String!
  status: UserStatus
  role: UserRole
}